README  2002/03/25

OniGuruma (regular expression library)

Copyright (C) 2002  K.Kosako (kosako@sofnec.co.jp)


There are two ways of using of it in this program.

  A. built-in regular expression engine of Ruby
  B. C library


Install

  A. Install into Ruby

     1. Copy regex.h and regex.c into ruby source directory.
     2. Apply a patch file to re.c.

        re.c.166.patch for Ruby 1.6.6 or 1.6.7
        re.c.172.patch for Ruby 1.7.2

     3. make clean     (in ruby source directory)
     4. make           (in ruby source directory)

    If you extracted this archive in ruby source directory
    (i.e. this file is ruby/oniguruma/README),
    then step 1 and 2 can be replaced with the following.

     1. ./configure             (in oniguruma directory)
     2. make 166 (or make 172)  (in oniguruma directory)


  B. Install library (and header file)

     1. ./configure
     2. make
     3. make install

     (* uninstall:  make uninstall)


License

   When this software is partly used or it is distributed, this of Ruby
   follows the license of Ruby.
   It follows the BSD license in the case of the one except for it.


Differences with japanized GNU regex(version 0.12) of Ruby

   + has a original native API. (Thread safe?  I hope so.)
   + has modified GNU regex API.
      * re_compile_fastmap() is removed. (no needs to call)
      * re_recompile_pattern() is added.
      * re_alloc_pattern() is added.
      * error messages are different.

   + look-behind (?<=fixed-char-length-pattern) and
                 (?<!fixed-char-length-pattern) are added.
     (char-class, anychar(.) and anchor(^,$,\A only) are allowed.)
   + Octal or hexadecimal number sequence can be treated as 
     a multibyte code char in char-class, if multibyte encoding is specified.
     (ex. [\xa1\xa2], [\xa1\xa7-\xa4\xa1])
   + Effect range of isolated option is to next ')'.
     ex. (?:(?i)a|b) is interpreted as (?:(?i:a|b)), not (?:(?i:a)|b).
   + Isolated option is not transparent to previous pattern.
     ex. a(?i)* is a syntax error pattern.
   + allowed incompleted left brace as a usual char.
     ex. /{/, /({)/, /a{2,3/ etc...
   + Negative POSIX bracket [:^xxxx:] is supported.
   + POSIX bracket [:ascii:] is added.

   + OniGuruma Extension  (*** It is invalid with Ruby in default. ***)
     * \k(single-byte word char), \K(multi-byte char). [experimental]


ToDo

   + benchmark script.

   ? get tail string optimizing info. ex. /X((.*).)+X/
     (add backward link to NCONS)
   ? reduce null-check range at bytecode compile time.
   ? add a new stack type for anystar(.*) matching process.
     [STK_ANYCHAR_STAR, address, str-low, str-now]
  ?? POSIX compatible API.

 and I'm thankful to Akinori MUSHA.


Problem

   + Ignore case option is not effect to an octal or hexadecimal 
     numbered char, but it becomes effective if it appears in the char class.
     This doesn't have consistency, though they are the specifications
     which are the same as GNU regex of Ruby.

      /\x61/i.match("A")     # => nil
      /[\x61]/i.match("A")   # => match

   + AC_PROG_INSTALL in configure.in  is not used.
     (Why configure script can't find /usr/bin/install in my box?)


History

2002/03/25: [spec] if encoding is utf-8, combination of singlebyte - 
                   multibyte code range in char class is allowed.
2002/03/25: the description of the license condition is added to README.
2002/03/23: [bug]  should set all bits of reg->mem_stats,
                   if REG_OPTION_FIND_LONGEST or REG_OPTION_NOT_EMPTY.
2002/03/23: [new]  add a new option REG_OPTION_NOT_EMPTY.
2002/03/20: [spec] allow incompleted left brace as a usual char.
                   ex. /{/, /({)/, /a{2,3/ etc...
2002/03/20: [impl] serialize integer in bytecode.
                   (switch by UNALIGNED_WORD_ACCESS macro in regex.c)
2002/03/20: [impl] change re_mbcinit() for REG_RUBY_M17N.
2002/03/19: [impl] word alignment of char class multi-byte code ranges.
2002/03/19: [impl] replace OP_EXACTMB4N with OP_EXACTMB3N.
2002/03/19: [bug]  OP_CCLASS_MB_NOT process in matchAt() is wrong.
2002/03/19: [new]  add re_mbctab[] for Ruby extension library compatibility.
2002/03/19: [spec] allow nested repeat operator, if operator is {n,m} type.
2002/03/19: [new]  add REG_IS_PATTERN_ERROR(ecode) in regex.h
2002/03/18: [spec] /[a-b-c]/ should be error.
2002/03/18: [bug]  /[\w-a]/ should be error.        (thanks Guy Decoux)
2002/03/18: [bug]  /[\]/ should be error.           (thanks Guy Decoux)
2002/03/18: [bug]  /()*/ etc.. should not be error. (thanks Guy Decoux)
2002/03/18: [spec] /a{1}*/ should not be error.     (thanks Guy Decoux)
2002/03/18: [bug]  ab{2}{3} was interpreded to (?:a(?:b{2})){3}
                   (thanks Guy Decoux)
2002/03/18: [bug]  abort /(?i)*a/ etc...            (thanks Guy Decoux)
2002/03/18: [bug]  abort /a|*/,/a|{1}/ etc...       (thanks Guy Decoux)

2002/03/13: Version 1.2

2002/03/13: [test] success in rubicon/builtin/AllBuiltinTests.rb.
                   (thanks rubicon)
2002/03/13: [bug]  OP_EXACTMBN process in matchAt() is wrong.
2002/03/13: [bug]  start argument of BackwardSearchRange() is wrong.
2002/03/12: [spec] change function name style from CamelCase
                   to underline_separation. (includes API)
2002/03/12: [bug]  if pattern has nested null-check, cause infinite loop.
                   correct STACK_NULL_CHECK() macro. (thanks Guy Decoux)
2002/03/11: [bug]  it is wrong that four numbers to continue as
                   an octal value in scanBackSlash(). ex. /\0111/
                   (thanks matz)
2002/03/11: [new]  \k (single-byte word char), \K (multi-byte char).
2002/03/09: [inst] add two targets to Makefile.in (166 and 177).
2002/03/09: [spec] decrease REG_MAX_BACKREF_NUM, REG_MAX_REPEAT_NUM
                   values.
2002/03/08: [spec] allow use of "\A"(begin-buf) in look-behind.
2002/03/08: [impl] add a new opcode OP_PUSH_IF_PEEK_NEXT.
2002/03/08: [impl] add a new opcode OP_ANYCHAR_STAR_PEEK_NEXT.
2002/03/07: [spec] prohibit use of memory group "(...)"
                   in negative look-behind.
2002/03/07: [inst] add configure.in, config.h.in, Makefile.in.
2002/03/07: [impl] call Init_REGEX_STAT() in RegexInit().
2002/03/07: [spec] less length string match with negative look-behind.
                   ex. /(?<!XXX)a/.match("Xa").    (thanks nobu)
2002/03/06: [impl] expand repeated string, if expanded length <= 100.
                   ex. /(?:abc){10}/
2002/03/06: [new]  add a symbol REG_TRANSTABLE_USE_DEFAULT in regex.h.
2002/03/06: [impl] rename RegDefaultCharCode to RegDefaultCharEncoding.
2002/03/06: [bug]  if pattern has NULL(\000) char, infinite loop happens 
                   in ScanMakeNode(). (beware of strchr(). thanks nobu)
2002/03/06: [bug]  range argument of ForwardSearchRange() is wrong.
                   ex. /\A.a/, /\G.a/ mismatched with "aa". (thanks nobu)
2002/03/05: [new]  add RegexMatch() API. rename regexMatch() to matchAt().
2002/03/05: [impl] change function definition style.
2002/03/05: [impl] abolish use of macro symbol which name begin with underline.
2002/03/04: [bug]  make up a break-statement in compileTree().
                   (compile error on Mac OS X 10.1.3)

2002/03/04: Version 1.1

2002/03/04: [impl] replace STK_BOTTOM with STK_ALT.
2002/03/02: [impl] add new opcode OP_FINISH and new stack type
                   STK_BOTTOM for (little bit) speed up STACK_POP.
2002/03/02: [impl] add new opcode OP_EXACT1_IC, OP_EXACTN_IC
                   for compile time ignore case check.
                   remove opcode OP_EXACT1_RAW, OP_EXACTN_RAW.
2002/03/02: [impl] add OpTime info to statistical data.
2002/02/28: [bug]  sub_anchor($) in ForwardSearch() and BackwardSearch().
                   ex. /$\x0az/.match("\nz")
2002/02/28: [new]  look-behind (?<=pattern), (?<!pattern).
2002/02/27: [bug]  use StackIndex instead of StackType* for realloc problem.
2002/02/27: [impl] use m17n_codepoint() as mb2wc() in REG_RUBY_M17N.
2002/02/27: [spec] undefined POSIX bracket /[[:xyz:]]/ should be syntax error.
2002/02/26: [bug]  ex. /$*/, /[a-]/, /((?i)a)b/   (thanks matz)

2002/02/25: Version 1.0 (first release)

--
[bug:  bug fix]
[new:  new feature]
[spec: specification change]
[impl: implementation change]
[inst: changes for installation]
