Language Spec.

- def foo; .. rescue .. end
- compile time string concatenation, "hello" "world" => "helloworld"
* ../... outside condition invokes operator method too.
* %w(a\ b\ c abc) => ["a b c", "abc"]
* package or access control for global variables
* class variable (prefix?)
* named arguments like foo(nation:="german") or foo(nation: "german").
* method to retrieve argument information (need new C API)
* multiple return values, yield values.  maybe incompatible ???
* cascading method invocation ???
* def Class#method .. end ??
* class Foo::Bar<Baz .. end, module Boo::Bar .. end
* def Foo::Bar::baz() .. end ??

Hacking Interpreter

- use eban's fnmatch
- RUBYOPT environment variable
* non-blocking open (e.g. for named pipe) for thread
* avoid blocking with gethostbyname/gethostbyaddr
* objectify interpreters
* remove rb_eval() recursions
* syntax tree -> bytecode ???
* scrambled script, or script filter
* setuid ruby

Standard Libraries

- hash[key] = nil may not remove entry; hashes may have nil as the value.
- hash.fetch(key) raises exception if key is not found.
- Array#{first,last,at}
- Dir.glob(pat){|f|...}
* Struct::new([name,]member,...) ??
* String#scanf(?)
* Object#fmt(?)
* Time::strptime
* Integer[num], Float[num];  Fixnum[num]?
* method to retrieve non-number trailer for to_i/to_f.
* Stream or Port, abstract superclass of IO ?
* String#{pred,prev}, String#downto
* optional stepsize argument for succ()

Extension Libraries

- FastCGI ruby
* ptk.rb pTk wrapper that is compatible to tk.rb

Ruby Libraries

* httplib.rb, urllib.rb, nttplib.rb, etc.
* format like perl's

Tools

* extension library maker like XS or SWIG
* freeze or undump to bundle everything

Misc

- publish Ruby books
