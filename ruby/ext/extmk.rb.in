#! /usr/local/bin/ruby

$".push 'mkmf.rb' #"
load '@top_srcdir@/lib/find.rb'

if ARGV[0] == 'static'
  $force_static = TRUE
  ARGV.shift
elsif ARGV[0] == 'install'
  $install = TRUE
  $destdir = ARGV[1] || ''
  ARGV.shift
elsif ARGV[0] == 'clean'
  $clean = TRUE
  ARGV.shift
end

$extlist = []

$cache_mod = FALSE;
$lib_cache = {}
$func_cache = {}
$hdr_cache = {}
$top_srcdir = "@top_srcdir@"
if $top_srcdir !~ "^/"
  # get absolute path
  save = Dir.pwd
  Dir.chdir $top_srcdir
  $top_srcdir = Dir.pwd
  Dir.chdir save
end
$topdir = ".."
if $topdir !~ "^/"  
  # get absolute path
  save = Dir.pwd
  Dir.chdir $topdir
  $topdir = Dir.pwd
  Dir.chdir save
end
$dots = if "@INSTALL@" =~ /^\// then "" else "#{$topdir}/ext/" end

if File.exist?("config.cache") then
  f = open("config.cache", "r")
  while f.gets
    case $_
    when /^lib: (.+) (yes|no)/
      $lib_cache[$1] = $2
    when /^func: ([\w_]+) (yes|no)/
      $func_cache[$1] = $2
    when /^hdr: (.+) (yes|no)/
      $hdr_cache[$1] = $2
    end
  end
  f.close
end

def older(file1, file2)
  if !File.exist?(file1) then
    return TRUE
  end
  if !File.exist?(file2) then
    return FALSE
  end
  if File.mtime(file1) < File.mtime(file2)
    return TRUE
  end
  return FALSE
end

if PLATFORM == "m68k-human"
CFLAGS = "@CFLAGS@".gsub(/-c..-stack=[0-9]+ */, '')
else
CFLAGS = "@CFLAGS@"
end
LINK = "@CC@ -o conftest -I#$topdir -I#$top_srcdir -I@includedir@ #{CFLAGS} %s @LDFLAGS@ %s conftest.c @LIBS@ %s"
CPP = "@CPP@ @CPPFLAGS@ -I#$topdir -I#$top_srcdir -I@includedir@ #{CFLAGS} %s conftest.c"

if /cygwin|mswin32|djgpp|mingw32|m68k-human/i =~ PLATFORM
  $null = open("nul", "w")
else
  $null = open("/dev/null", "w")
end

$orgerr = $stderr.dup
$orgout = $stdout.dup
def xsystem command
  if $DEBUG
    return system(command)
  end
  $stderr.reopen($null) 
  $stdout.reopen($null) 
  r = system(command)
  $stderr.reopen($orgerr)
  $stdout.reopen($orgout)
  return r
end

def try_link(libs)
  xsystem(format(LINK, $CFLAGS, $LDFLAGS, libs))
end

def try_cpp
  xsystem(format(CPP, $CFLAGS))
end

def install_rb(mfile)
  path = []
  dir = []
  Find.find("lib") do |f|
    next unless /\.rb$/ =~ f
    f = f[4..-1]
    path.push f
    dir |= File.dirname(f)
  end
  for f in dir
    next if f == "."
    mfile.printf "\t@test -d $(DESTDIR)$(pkglibdir)/%s || mkdir $(DESTDIR)$(pkglibdir)/%s\n", f, f
  end
  for f in path
    mfile.printf "\t$(INSTALL_DATA) lib/%s $(DESTDIR)$(pkglibdir)/%s\n", f, f
  end
end

def have_library(lib, func="main")
  if $lib_cache[lib]
    if $lib_cache[lib] == "yes"
      if $libs
        $libs = "-l" + lib + " " + $libs 
      else
	$libs = "-l" + lib
      end
      return TRUE
    else
      return FALSE
    end
  end

  if func && func != ""
    cfile = open("conftest.c", "w")
    cfile.printf "\
int main() { return 0; }
int t() { %s(); return 0; }
", func
    cfile.close

    begin
      if $libs
	libs = "-l" + lib + " " + $libs 
      else
	libs = "-l" + lib
      end
      unless try_link(libs)
	$lib_cache[lib] = 'no'
	$cache_mod = TRUE
	return FALSE
      end
    ensure
      system "rm -f conftest*"
    end
  else
    if $libs
      libs = "-l" + lib + " " + $libs 
    else
      libs = "-l" + lib
    end
  end

  $libs = libs
  $lib_cache[lib] = 'yes'
  $cache_mod = TRUE
  return TRUE
end

def have_func(func)
  if $func_cache[func]
    if $func_cache[func] == "yes"
      $defs.push(format("-DHAVE_%s", func.upcase))
      return TRUE
    else
      return FALSE
    end
  end

  cfile = open("conftest.c", "w")
  cfile.printf "\
char %s();
int main() { return 0; }
int t() { %s(); return 0; }
", func, func
  cfile.close

  libs = $libs
  libs = "" if libs == nil

  begin
    unless try_link(libs)
      $func_cache[func] = 'no'
      $cache_mod = TRUE
      return FALSE
    end
  ensure
    system "rm -f conftest*"
  end
  $defs.push(format("-DHAVE_%s", func.upcase))
  $func_cache[func] = 'yes'
  $cache_mod = TRUE
  return TRUE
end

def have_header(header)
  if $hdr_cache[header]
    if $hdr_cache[header] == "yes"
      header.tr!("a-z./\055", "A-Z___")
      $defs.push(format("-DHAVE_%s", header))
      return TRUE
    else
      return FALSE
    end
  end

  cfile = open("conftest.c", "w")
  cfile.printf "\
#include <%s>
", header
  cfile.close

  begin
    unless try_cpp
      $hdr_cache[header] = 'no'
      $cache_mod = TRUE
      return FALSE
    end
  ensure
    system "rm -f conftest*"
  end
  $hdr_cache[header] = 'yes'
  header.tr!("a-z./\055", "A-Z___")
  $defs.push(format("-DHAVE_%s", header))
  $cache_mod = TRUE
  return TRUE
end

def create_header()
  if $defs.length > 0
    hfile = open("extconf.h", "w")
    for line in $defs
      line =~ /^-D(.*)/
      hfile.printf "#define %s 1\n", $1
    end
    hfile.close
  end
end

def create_makefile(target)

  if $libs and "@DLEXT@" == "o"
    libs = $libs.split
    for lib in libs
      lib.sub!(/-l(.*)/, '"lib\1.a"')
    end
    $defs.push(format("-DEXTLIB='%s'", libs.join(",")))
  end

  $DLDFLAGS = '@DLDFLAGS@'

  if PLATFORM =~ /beos/
    if $libs
      $libs = $libs + " -lruby"
    else
      $libs = "-lruby"
    end
    $DLDFLAGS = $DLDFLAGS + " -L" + $topdir
  end

  $srcdir = $top_srcdir + "/ext/" + target
  mfile = open("Makefile", "w")
  mfile.printf "\
SHELL = /bin/sh

#### Start of system configuration section. ####

srcdir = #{$srcdir}
VPATH = #{$srcdir}

hdrdir = #{$topdir}

CC = @CC@

prefix = @prefix@
CFLAGS   = %s -I#{$topdir} -I#{$top_srcdir} -I@includedir@ #{CFLAGS} #$CFLAGS %s
DLDFLAGS = #$DLDFLAGS @LDFLAGS@ #$LDFLAGS
LDSHARED = @LDSHARED@
", if $static then "" else "@CCDLFLAGS@" end, $defs.join(" ")

  mfile.printf "\

program_transform_name = -e @program_transform_name@
RUBY_INSTALL_NAME = `t='$(program_transform_name)'; echo ruby | sed $$t`

prefix = @prefix@
exec_prefix = @exec_prefix@
libdir = @libdir@
pkglibdir = $(libdir)/$(RUBY_INSTALL_NAME)
archdir = $(pkglibdir)/@arch@
@SET_MAKE@

#### End of system configuration section. ####

"
  mfile.printf "LOCAL_LIBS = %s\n", $local_libs unless $local_libs == ""
  mfile.printf "LIBS = %s\n", $libs
  mfile.printf "OBJS = "
  if !$objs then
    $objs = []
    for f in Dir["#{$top_srcdir}/ext/#{$mdir}/*.{c,cc}"]
      f = File.basename(f)
      f.sub!(/\.(c|cc)$/, ".o")
      $objs.push f
    end
  end
  mfile.printf $objs.join(" ")
  mfile.printf "\n"

  mfile.printf <<EOS
TARGET = #{target}.#{$static ? "a" : "@DLEXT@"}

INSTALL = #{$dots}@INSTALL@
INSTALL_DATA = @INSTALL_DATA@

binsuffix = @binsuffix@

all:		$(TARGET)

clean:;		@rm -f *.o *.a *.so *.sl
		@rm -f Makefile extconf.h conftest.*
		@rm -f core ruby$(binsuffix) *~

realclean:	clean
EOS

  mfile.printf <<EOS

install:
	@test -d $(DESTDIR)$(libdir) || mkdir $(DESTDIR)$(libdir)
	@test -d $(DESTDIR)$(pkglibdir) || mkdir $(DESTDIR)$(pkglibdir)
	@test -d $(DESTDIR)$(archdir) || mkdir $(DESTDIR)$(archdir)
EOS
  if !$static
    mfile.printf "\
	$(INSTALL) $(TARGET) $(DESTDIR)$(archdir)/$(TARGET)
"
  end
  install_rb(mfile)
  mfile.printf "\n"

  if $static
      mfile.printf "\
$(TARGET): $(OBJS)
	@AR@ cru $(TARGET) $(OBJS)
	@-@RANLIB@ $(TARGET) 2> /dev/null || true
"
  elsif "@DLEXT@" != "o"
    mfile.printf "\
$(TARGET): $(OBJS)
	$(LDSHARED) $(DLDFLAGS) -o $(TARGET) $(OBJS) $(LIBS) $(LOCAL_LIBS)
"
  elsif not File.exist?(target + ".c") and not File.exist?(target + ".cc")
    if PLATFORM == "m68k-human"
      mfile.printf "\
$(TARGET): $(OBJS)
	ar cru $(TARGET) $(OBJS)
"
    elsif PLATFORM =~ "-nextstep" || PLATFORM =~ "-openstep" || PLATFORM =~ "-rhapsody"
      mfile.printf "\
$(TARGET): $(OBJS)
	cc -r $(CFLAGS) -o $(TARGET) $(OBJS)
"
    else
      mfile.printf "\
$(TARGET): $(OBJS)
	ld $(DLDFLAGS) -r -o $(TARGET) $(OBJS)
"
    end
  end

  if File.exist?("depend")
    dfile = open("depend", "r")
    mfile.printf "###\n"
    while line = dfile.gets()
      mfile.printf "%s", line
    end
    dfile.close
  end
  mfile.close
  
  if PLATFORM =~ /beos/
    if PLATFORM =~ /^powerpc/ then
      deffilename = "ruby.exp"
    else
      deffilename = "ruby.def"
    end
    print "creating ruby.def\n"
    open(deffilename, "w") do |file|
      file.print("EXPORTS\n") if PLATFORM =~ /^i/
      file.print("Init_#{target}\n")
    end
  end
end

def extmake(target)
  if $force_static or $static_ext[target]
    $static = target
  else
    $static = FALSE
  end

  return if $nodynamic and not $static

  $objs = nil
  $libs = PLATFORM =~ /cygwin|beos|openstep|nextstep|rhapsody/ ? nil : "-lc"
  $local_libs = ""		# to be assigned in extconf.rb
  $CFLAGS = ""
  $LDFLAGS = ""

  begin
    system "mkdir", target unless File.directory?(target)
    Dir.chdir target
    $mdir = target
    if $static_ext.size > 0 ||
      !File.exist?("./Makefile") ||
      older("./Makefile", "#{$top_srcdir}/ext/@setup@") ||
      older("./Makefile", "../extmk.rb") ||
      older("./Makefile", "#{$top_srcdir}/ext/#{target}/extconf.rb")
    then
      $defs = []
      if File.exist?("#{$top_srcdir}/ext/#{target}/extconf.rb")
	load "#{$top_srcdir}/ext/#{target}/extconf.rb"
      else
	create_makefile(target);
      end
    end
    if File.exist?("./Makefile")
      if $static
	$extlist.push [$static,target]
      end
      if $install
	system "make install DESTDIR=#{$destdir}"
      elsif $clean
	system "make clean"
      else
	system "make all"
      end
    end
    if $static
      $extlibs ||= ""
      $extlibs += " " + $LDFLAGS unless $LDFLAGS == ""
      $extlibs += " " + $libs if $libs
      $extlibs += " " + $local_libs unless $local_libs == ""
    end
  ensure
    Dir.chdir ".."
  end
end

# get static-link modules
$static_ext = {}
for setup in ["@setup@", "#{$top_srcdir}/ext/@setup@"]
  if File.file? setup
    f = open(setup) 
    while f.gets()
      $_.chomp!
      sub!(/#.*$/, '')
      next if /^\s*$/
      if /^option +nodynamic/
	$nodynamic = TRUE
	next
      end
      $static_ext[$_.split[0]] = TRUE
    end
    f.close
    break
  end
end

for d in Dir["#{$top_srcdir}/ext/*"]
  File.directory?(d) || next
  File.file?(d + "/MANIFEST") || next
  
  d = File.basename(d)
  if $install
    print "installing ", d, "\n"
  elsif $clean
    print "cleaning ", d, "\n"
  else
    print "compiling ", d, "\n"
  end
  extmake(d)
end

if $cache_mod
  f = open("config.cache", "w")
  for k,v in $lib_cache
    f.printf "lib: %s %s\n", k, v
  end
  for k,v in $func_cache
    f.printf "func: %s %s\n", k, v
  end
  for k,v in $hdr_cache
    f.printf "hdr: %s %s\n", k, v
  end
  f.close
end

exit if $install or $clean
$extinit = "" unless $extinit
if $extlist.size > 0
  for s,t in $extlist
    f = format("%s/%s.a", s, t)
    if File.exist?(f)
      $extinit += format("\
\tInit_%s();\n\
\trb_provide(\"%s.o\");\n\
", t, t)
      $extobjs = "" unless $extobjs
      $extobjs += "ext/"
      $extobjs += f
      $extobjs += " "
    else
      FALSE
    end
  end

  if older("extinit.c", "#{$top_srcdir}/ext/@setup@")
    f = open("extinit.c", "w")
    f.printf "void Init_ext() {\n"
    f.printf $extinit
    f.printf "}\n"
    f.close
  end
  if older("extinit.o", "extinit.c")
    cmd = "@CC@ " + CFLAGS + " -c extinit.c"
    print cmd, "\n"
    system cmd or exit 1
  end

  Dir.chdir ".."

  if older("ruby@binsuffix@", "#{$top_srcdir}/ext/@setup@") or older("ruby@binsuffix@", "miniruby@binsuffix@")
    `rm -f ruby@binsuffix@`
  end

  if $extobjs
    $extobjs = "ext/extinit.o " + $extobjs
  else
    $extobjs = "ext/extinit.o "
  end
  if PLATFORM =~ /m68k-human|beos/
    $extlibs.gsub!("-L/usr/local/lib", "") if $extlibs
  end
  system format('make ruby@binsuffix@ EXTOBJS="%s" EXTLIBS="%s"', $extobjs, $extlibs)
else
  Dir.chdir ".."
  if older("ruby@binsuffix@", "miniruby@binsuffix@")
    `rm -f ruby@binsuffix@`
    system("make ruby@binsuffix@")
  end
end

#Local variables:
# mode: ruby
#end:
